awk awk - pattern-directed scanning and processing language [ ] [
] [ | ] [ ] scans each input for lines that match any of a set of
patterns specified literally in or in one or more files specified
as With each pattern there can be an associated action that  will
be  performed when a line of a matches the pattern.  Each line is
matched against  the  pattern  portion  of  every  pattern-action
statement;  the  associated  action is performed for each matched
pattern.  The file name means the standard  input.   Any  of  the
form is treated as an assignment, not a filename, and is executed
at the time it would have been opened if it were a filename.  The
option  followed by is an assignment to be done before is execut-
ed; any number of options may be present.  The option defines the
input  field separator to be the regular expression An input line
is normally made up of fields separated by  white  space,  or  by
regular  expression  The  fields are denoted ..., while refers to
the entire line.  If is null, the input line is  split  into  one
field  per  character.  A pattern-action statement has the form A
missing means print the line; a missing pattern  always  matches.
Pattern-action  statements  are  separated  by  newlines or semi-

be one of the following:
if( [4mexpression[24m ) [4mstatement[24m [ else [4mstatement[24m ]
while( [4mexpression[24m ) [4mstatement[0m
for( [4mexpression[24m ; [4mexpression[24m ; [4mexpression[24m ) [4mstatement[0m
for( [4mvar[24m in [4marray[24m ) [4mstatement[0m
do [4mstatement[24m while( [4mexpression[24m )
break
continue
{ [ [4mstatement[24m [4m...[24m ] }
[4mexpression[24m              # commonly [4mvar[24m [4m=[24m [4mexpression[0m
print [ [4mexpression-list[24m ] [ > [4mexpression[24m ]
printf [4mformat[24m [ , [4mexpression-list[24m ] [ > [4mexpression[24m ]
return [ [4mexpression[24m ]
next                    # skip remaining patterns on this input line
nextfile                # skip rest of this file, open next, start at top
delete [4marray[24m[ [4mexpression[24m ]# delete an array element
delete [4marray[24m            # delete all elements of array
exit [ [4mexpression[24m ]     # exit immediately; status is [4mexpression[0m
Statements  are  terminated  by  semicolons,  newlines  or  right
braces.  An empty stands for String  constants  are  quoted  " ",
with  the usual C escapes recognized within.  Expressions take on
string or numeric values as appropriate, and are built using  the
operators (exponentiation), and concatenation (indicated by white
space).  The operators ! ++ -- += -= *= /= %= ^= > >= < <= ==  !=
?:  are also available in expressions.  Variables may be scalars,
array elements (denoted or fields.  Variables are initialized  to
the  null string.  Array subscripts may be any string, not neces-
sarily numeric; this allows for a  form  of  associative  memory.
Multiple  subscripts  such as are permitted; the constituents are
concatenated, separated by the value of The statement prints  its
arguments  on  the standard output (or on a file if or is present
or on a pipe if is present),  separated  by  the  current  output
field  separator,  and terminated by the output record separator.
and may be literal names or parenthesized expressions;  identical
string  values in different statements denote the same open file.
The statement formats its expression list according to the format
(see  The  built-in function closes the file or pipe The built-in
function flushes any buffered output for the  file  or  pipe  The
mathematical  functions  and  are built in.  Other built-in func-
tions: the length of its argument taken as a string, or of if  no
argument.   random  number on (0,1) sets seed for and returns the
previous seed.  truncates to an integer value  the  substring  of
that  begins  at  position counted from 1.  the position in where
the string occurs, or 0 if it does not.  the  position  in  where
the  regular  expression  occurs, or 0 if it does not.  The vari-
ables and are set to the  position  and  length  of  the  matched
string.   splits  the string into array elements ..., and returns
The separation is done with the regular expression  or  with  the
field  separator if is not given.  An empty string as field sepa-
rator splits the string into one  array  element  per  character.
substitutes for the first occurrence of the regular expression in
the string If is not given, is used.  same as except that all oc-
currences  of the regular expression are replaced; and return the
number of replacements.  the string resulting from formatting ac-
cording  to  the  format executes and returns its exit status re-
turns a copy of with  all  upper-case  characters  translated  to
their  corresponding  lower-case  equivalents.  returns a copy of
with all lower-case characters translated to their  corresponding
upper-case  equivalents.  The ``function'' sets to the next input
record from the current input file; sets to the next record  from
sets  variable  instead.   Finally, pipes the output of into each
call of returns the next line of output from In  all  cases,  re-
turns  1 for a successful input, 0 for end of file, and -1 for an
error.  Patterns are arbitrary Boolean combinations (with of reg-
ular expressions and relational expressions.  Regular expressions
are as in see Isolated regular expressions in a pattern apply  to
the entire line.  Regular expressions may also occur in relation-
al expressions, using the operators and is a constant regular ex-
pression; any string (constant or variable) may be used as a reg-
ular expression, except in the position of  an  isolated  regular
expression  in  a pattern.  A pattern may consist of two patterns
separated by a comma; in this case, the action is  performed  for
all  lines  from an occurrence of the first pattern though an oc-
currence of the second.  A relational expression is  one  of  the
following:
where  a relop is any of the six relational operators in C, and a
matchop is either (matches) or (does not match).   A  conditional
is  an arithmetic expression, a relational expression, or a Bool-
ean combination of these.  The special patterns and may  be  used
to  capture control before the first input line is read and after
the last.  and do not  combine  with  other  patterns.   Variable
names with special meanings: conversion format used when convert-
ing numbers (default regular expression used to separate  fields;
also  settable  by  option number of fields in the current record
ordinal number of the current record ordinal number of  the  cur-
rent  record  in  the  current file the name of the current input
file input record separator (default newline) output field  sepa-
rator  (default  blank) output record separator (default newline)
output format for numbers (default separates multiple  subscripts
(default 034) argument count, assignable argument array, assigna-
ble; non-null members are taken as filenames array of environment
variables;  subscripts  are  names.  Functions may be defined (at
the position of a pattern-action statement) thus: function foo(a,
b,  c) { ...; return x } Parameters are passed by value if scalar
and by reference if array name; functions may  be  called  recur-
sively.   Parameters  are  local to the function; all other vari-
ables are global.  Thus local variables may be created by provid-
ing excess parameters in the function definition.
length($0) > 72
Print lines longer than 72 characters.
{ print $2, $1 }
Print first two fields in opposite order.
BEGIN { FS = ",[ \t]*|[ \t]+" }
      { print $2, $1 }
Same,  with  input  fields  separated  by comma and/or blanks and
tabs.
                        { s += $1 }
END                     { print "sum is", s, " average is", s/NR }
Add up first column, print sum and average.
/start/, /stop/
Print all lines between start/stop pairs.
BEGIN                   {# Simulate echo(1)
                        for (i = 1; i < ARGC; i++) printf "%s ", ARGV[i]
                        printf "\n"
                        exit }
A. V. Aho, B. W. Kernighan, P. J. Weinberger, The AWK Programming
Language,  Addison-Wesley, 1988.  ISBN 0-201-07981-X There are no
explicit conversions between numbers and strings.   To  force  an
expression  to be treated as a number add 0 to it; to force it to
be treated as a string concatenate "" to it.
The scope rules for variables in functions are a botch; the  syn-
tax is worse.
